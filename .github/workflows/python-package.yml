# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install cuda-toolkit
      id: cuda-toolkit
      uses: Jimver/cuda-toolkit@v.02.11
      with:
        cuda: '12.1.0'
    - name: Verify cuda-toolkit
      run: |
        echo "Installed cuda version is: ${{steps.cuda-toolkit.output.cuda}}"
        echo "Cuda install location: ${{steps.cuda-toolkit.output.CUDA_PATH}}"
        nvcc -V
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel build
        python -m pip install check-manifest flake8 coverage
        # python -c "import configparser; c=configparser.ConfigParser(); c.read('setup.cfg'); print(c['options']['install_requires'])" > requirements.txt
        python -m pip install ./
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Check manifest
      run: |
        check-manifest
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build a binary wheel and a source tarball
      run: |
        python -m build
    - name: Unit Tests and generate coverage report
      run: |
        coverage run -m unittest discover
        coverage report -m
        coverage xml
        coverage html
