name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        # os: [ubuntu-22.04, windows-2022, macos-11]

    steps:
      - name: Checkout imagedata_registration
        uses: actions/checkout@v4

      - name: Build wheels
        # uses: pypa/cibuildwheel@v2.16.1
        env:
          # Skip 32-bit builds
          # Disable building PyPy wheels on all platforms
          # Skip all musllinux (manylinux only supported by itk-io)
          CIBW_SKIP: "*-win32 *-manylinux_i686 pp* *-musllinux*"
          NPY_NO_DEPRECATED_API: "NPY_1_7_API_VERSION"
          
        # with:
        #   package-dir: .
        #   output-dir: wheelhouse
        #   config-file: "{package}/pyproject.toml"
        run: |
          pip install cython numpy
          mkdir -p imagedata_registration/NPreg
          python setup.py build_ext -i
          mv imagedata_registration/NPreg/*.so src/imagedata_registration/NPreg
          bash build_tools/wheels/build_wheels.sh

      - name: Testing - prepare with coverage
        run: |
          pip install coverage imagedata
      - name: Testing - with Cython
        run: |
          coverage run -m unittest discover tests -t .
      - name: Testing - without Cython
        run: |
          find . -name '*.so' | xargs rm
          coverage run -m unittest discover tests -t .
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz


  publish-to-testpypi:
    name: Publish Python distribution to TestPyPi
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://test.pypi.org/legacy
    permissions:
      id-token: write
    # if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - name: Upload
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

          
  publish-to-pypi:
    name: Publish Python distribution to PyPi
    # if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      # url: https://test.pypi.org/legacy
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - name: Upload distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

